# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'LR0.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import datetime
from PyQt5.QtGui import QStandardItemModel, QStandardItem
from PyQt5.QtWidgets import QHeaderView
from collections import defaultdict
from graphviz import Digraph
my_dict = defaultdict(list)#记录各个终结符的产生式
my_dicts = defaultdict(list)#代表每组项目，暂时存储
VNT = []
VT = []
MAX = 60 #生成最多的项目集个数
end = [] #记录，上一个状态数，通过的字符，下一个状态数[最终结果]
numset = []#列表，修订状态数 
endstate = [] #最终存储项目集镞 [最终结果]
guiyue = ['S->E'] #记录每条文法
Q = []
get = [] 
def isTerminal(c):  # 若c介于A-Z之间则认为是非终结符(注意添加 self参数)
        if (c < 'A' or c > 'Z') and c !='-' and c!='>':
            return True
        else:
            return False

def SplitText(text): # 把文法中E->A|B 切分为E->A和E->B
    mytext = ""
    global VT,VNT
    for i in text:
        if(i != ' '):#删除字符串的空格
            mytext += i;
    i = mytext.split('\n')
    for j in i:
        #print(j[0])
        if(VNT.count(j[0])==0):#没出现过的终结符
            VNT.append(j[0])    
        for js in j:
            if(isTerminal(js) and VT.count(js)==0):
                VT.append(js)  
        for k in range(1,len(j)):
            if(j[k]=='-' and j[k+1]=='>'):
                k = k+2
                break
        guiyue.append(j)
        my_dict[j[0]].append(j[k:])
    print(guiyue)
num = 0       
def CLOSURE_LR0(mystr):#LR0
    global num
    if(num > MAX):
        return 
    my_dicts[num].append(mystr) #先加上它本身
    for i in range(0,len(mystr)):
        if(mystr[i] =='.' and i == len(mystr)-1):
            return
        if(mystr[i] =='.' and i != len(mystr)-1):
            ch = mystr[i+1]
    if(ch in VNT):
        for j in range(0,len(my_dict[ch])):
            ch2 = my_dict[ch][j]
            mystr = ch+"->."+ch2
            if(ch2[0] in VNT):#如果新生成的还是非终结符
                CLOSURE_LR0(mystr)
            if(my_dicts[num].count(mystr)==0):
                my_dicts[num].append(mystr)
               
def FA(init):
    global num
    for fs in my_dicts[init]:
        for i in range(0,len(fs)):
            if(fs[i]=='.' and i == len(fs)-1):
                break
            if(fs[i]=='.' and i != len(fs)-1):
                num += 1
                mystr = list(fs)
                mystr[i],mystr[i+1] = mystr[i+1],mystr[i]
                mystr = ''.join(mystr) 
                ls = []      
                ls.append(init)
                ls.append(fs[i+1])
                ls.append(num)
                #print(ls)
                end.append(ls)
                CLOSURE_LR0(mystr)
def DFA():
    global num
    init = num
    if(init == 0):
        CLOSURE_LR0("S->.E")#生成项目集族的I0
    FA(init)
    while(init<50):
        init += 1
        FA(init)
class Ui_Form(object):
    def setupUi(self, LR0):
        LR0.setObjectName("LR0")
        LR0.resize(979, 832)
        font = QtGui.QFont()
        font.setPointSize(15)
        LR0.setFont(font)
        self.label = QtWidgets.QLabel(LR0)
        self.label.setGeometry(QtCore.QRect(20, 20, 61, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.textEdit = QtWidgets.QTextEdit(LR0)
        self.textEdit.setGeometry(QtCore.QRect(10, 70, 211, 321))
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setText("E -> aA\nE -> bB\nA -> cA\nA -> d\nB -> cB\nB -> d")
        self.label_2 = QtWidgets.QLabel(LR0)
        self.label_2.setGeometry(QtCore.QRect(20, 400, 161, 51))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.lineEdit = QtWidgets.QLineEdit(LR0)
        self.lineEdit.setGeometry(QtCore.QRect(10, 460, 221, 41))
        self.lineEdit.setText("acccd#")
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.label_3 = QtWidgets.QLabel(LR0)
        self.label_3.setGeometry(QtCore.QRect(20, 760, 51, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.textBrowser = QtWidgets.QTextBrowser(LR0)
        self.textBrowser.setGeometry(QtCore.QRect(100, 761, 761, 51))
        self.textBrowser.setObjectName("textBrowser")

        self.pushButton = QtWidgets.QPushButton(LR0)
        self.pushButton.setGeometry(QtCore.QRect(10, 510, 200, 80))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.Run)

        self.pushButton_2 = QtWidgets.QPushButton(LR0)
        self.pushButton_2.setGeometry(QtCore.QRect(10, 680, 200, 80))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.Flush)

        self.pushButton_3 = QtWidgets.QPushButton(LR0)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 595, 200, 80))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.Draw)
        
        self.tabWidget = QtWidgets.QTabWidget(LR0)
        self.tabWidget.setGeometry(QtCore.QRect(240, 20, 731, 731))
        self.tabWidget.setObjectName("tabWidget")
        self.States = QtWidgets.QWidget()
        self.States.setObjectName("States")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.States)
        self.textBrowser_3.setGeometry(QtCore.QRect(0, 0, 731, 691))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.tabWidget.addTab(self.States, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.tableView_2 = QtWidgets.QTableView(self.tab_2)
        self.tableView_2.setGeometry(QtCore.QRect(0, 0, 731, 691))
        self.tableView_2.setObjectName("tableView_2")
        self.tabWidget.addTab(self.tab_2, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.tableView_3 = QtWidgets.QTableView(self.tab_3)
        self.tableView_3.setGeometry(QtCore.QRect(0, 0, 731, 701))
        self.tableView_3.setObjectName("tableView_3")
        self.tabWidget.addTab(self.tab_3, "")

        self.retranslateUi(LR0)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(LR0)

    def retranslateUi(self, LR0):
        _translate = QtCore.QCoreApplication.translate
        LR0.setWindowTitle(_translate("LR0", "LR(0)"))
        self.label.setText(_translate("LR0", "文法"))
        self.label_2.setText(_translate("LR0", "输 入 框"))
        self.pushButton.setText(_translate("LR0", "运行程序"))
        self.label_3.setText(_translate("LR0", "分析"))
        self.pushButton_2.setText(_translate("LR0", "刷新文法"))
        self.pushButton_3.setText(_translate("LR0", "保存文件"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.States), _translate("LR0", "项 目 集 族"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("LR0", "分 析 过 程"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("LR0", "分 析 表"))
    def Draw(self):
        g = Digraph(name='DFA')   #绘图开始
        visit = [[0]*15 for i in range(15)]
        for i in range(len(end)):
            a = end[i][0]
            b = Q.index(end[i][1])
            
            if(visit[a][b] == 0):
                print('v',end[i])
                g.node(str(end[i][0]),'I'+str(end[i][0]))
                g.node(str(end[i][2]),'I'+str(end[i][2]))
                g.edge(str(end[i][0]),str(end[i][2]),str(end[i][1]))
                get.append(end[i])
                visit[a][b] = 1
        g.view('DFA')
    def Flush(self):
        global my_dict,my_dicts,VNT,VT,end,numset,endstate,guiyue,num
        my_dict = defaultdict(list)#记录各个终结符的产生式
        my_dicts = defaultdict(list)#代表每组项目，暂时存储
        VNT = []
        VT = []
        end = [] #记录，上一个状态数，通过的字符，下一个状态数[最终结果]
        numset = []#列表，修订状态数 
        endstate = [] #最终存储项目集镞 [最终结果]
        guiyue = ['S->E'] #记录每条文法
        num = 0
        self.textEdit.setText("E ->aA\nE -> bB\nA -> cA\nA -> d\nB -> cB\nB -> d")
        self.lineEdit.setText("acccd#")
        self.textBrowser.setText('刷 新 成 功！')
    def Run(self):
        global Q,get,end
        text = self.textEdit.toPlainText()
        SplitText(text)
        DFA()
        endstate = []
        get = []
        if('#' not in VT):
            VT.append('#')
        Q = VT+VNT
        visit = [[0]*15 for i in range(15)]
        for i in range(0,len(my_dicts)):
            if endstate.count(my_dicts[i]) == 0:
                endstate.append(my_dicts[i])
        for i in end: 
            sa = my_dicts[i[0]]
            sb = my_dicts[i[2]]
            #print(num,sa,'hh',sb)
            if endstate.count(sa)==1:#修订状态序号
                i[0] = endstate.index(sa)
            if endstate.count(sb)==1:#修订状态序号
                i[2] = endstate.index(sb)
        for i in range(0,len(end)):
            a = end[i][0]
            b = Q.index(end[i][1])
            if(visit[a][b] == 0):
                get.append(end[i])
                visit[a][b] = 1
        label_x = Q
        self.model3 = QStandardItemModel(len(label_x),len(Q))
        self.model3.setHorizontalHeaderLabels(label_x)
        label_y = []
        for i in range(0,len(endstate)):
            label_y.append(str(i))
        self.model3.setVerticalHeaderLabels(label_y)
        ACTION = [['0'] * len(VT) for i in range(len(endstate))] #存储分析表内容，为分析过程做准备
        GOTO = [['0'] * len(VNT) for i in range(len(endstate))]
        for q in get: #移进动作
            if(q[1] not in VNT):
                ss = 's'+str(q[2])
                ACTION[int(q[0])][VT.index(q[1])] = ss
            else:
                ss = str(q[2])
                GOTO[int(q[0])][VNT.index(q[1])] = ss
            item = QStandardItem(ss)
            self.model3.setItem(int(q[0]),label_x.index(q[1]),item)
        endstr = 'S->E.' #终结标志
        for i in range(len(endstate)):#规约动作
            for j in range(len(endstate[i])):
                    if(endstate[i][j][-1]=='.'):
                        if(endstate[i][0] == endstr):
                           item = QStandardItem("acc")#结束
                           self.model3.setItem(i,label_x.index('#'),item)
                        else:  
                            ii = guiyue.index(endstate[i][j][:-1])
                            for k in range(len(VT)):
                                item = QStandardItem("r"+str(ii))
                                ACTION[i][k] = "r"+str(ii)
                                self.model3.setItem(i,k,item)
              
        self.tableView_3.horizontalHeader().setStretchLastSection(True)
        self.tableView_3.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView_3.setModel(self.model3)  

        mystate = [0]#状 态
        stack = '#'  #符 号
        inputstr = self.lineEdit.text()#输 入 串
        actions = '初 始 化'#动 作
        label_x = ['状 态', '符 号', '输 入 串', '动 作']
        self.model2 = QStandardItemModel(30,4)
        self.model2.setHorizontalHeaderLabels(label_x)
        tabnum = 0
        while(1):
            self.model2.setItem(tabnum,0,QStandardItem(str(mystate)))
            self.model2.setItem(tabnum,1,QStandardItem(stack))
            self.model2.setItem(tabnum,2,QStandardItem(inputstr))
            self.model2.setItem(tabnum,3,QStandardItem(actions))
            tabnum += 1
            if(inputstr[0] not in VT):
                self.textBrowser.setText('报 错！')
            else:
                ch = ACTION[mystate[-1]][VT.index(inputstr[0])]#读取action值
            if(ch =='r0' or ch == '0'):#本质就是acc
                self.textBrowser.setText('Acc: 分 析 成 功！')
                break
            
            if(ch[0] == 's'):
                mystate.append(int(ch[1:]))#状态加一个
                stack += inputstr[0]#移进
                actions = '状态s'+str(ch[1:])+'入栈'+','+'输入符号 '+inputstr[0]+' 移进栈'
                inputstr = inputstr[1:]#相当于删除第一个元素
            if(ch[0] == 'r'):
                gylist = guiyue[int(ch[1:])].split('->')
                g1 = str(gylist[1])[::-1]
                g0 = str(gylist[0])[::-1]
                gstack = stack[::-1]#逆序解决规约问题
                gstack = gstack.replace(g1,g0,1)
                stack = gstack[::-1]#完成规约任务
                strlen = len(gylist[1]) #计算长度
                for i in range(strlen):
                    mystate.pop()#连续出栈
                gotoint = int(GOTO [mystate[-1]] [VNT.index(gylist[0])] )
                mystate.append(gotoint)
                actions = ch+':'+guiyue[int(ch[1:])]+' 规约,'+'状态s'+str(gotoint)+'入栈'
            
        self.tableView_2.horizontalHeader().setStretchLastSection(True)
        self.tableView_2.horizontalHeader().setSectionResizeMode(QHeaderView.Stretch)
        self.tableView_2.setModel(self.model2)
        #写入项目集族  
        self.textBrowser_3.setText("\t\t\tLR(0)项 目 集 族\n")
        for i in range(len(endstate)-1):
            self.textBrowser_3.append('I'+str(i)+': '+str(endstate[i])+'\n')
if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
